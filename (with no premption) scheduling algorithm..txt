class Process:
    def __init__(self, pid, arrival_time, burst_time):
        self.pid = pid              # Process ID
        self.arrival_time = arrival_time  # Arrival time of the process
        self.burst_time = burst_time      # Burst time (execution time) of the process
        self.completion_time = 0          # Completion time of the process
        self.turnaround_time = 0          # Turnaround time (Completion time - Arrival time)
        self.waiting_time = 0             # Waiting time (Turnaround time - Burst time)

def fcfs_scheduling(processes):
    # Sort the processes by their arrival time (the first process to arrive gets executed first)
    processes.sort(key=lambda x: x.arrival_time)

    # Initialize start time
    current_time = 0

    # Calculate waiting time, turnaround time, and completion time for each process
    for process in processes:
        if current_time < process.arrival_time:
            current_time = process.arrival_time
        
        process.completion_time = current_time + process.burst_time
        process.turnaround_time = process.completion_time - process.arrival_time
        process.waiting_time = process.turnaround_time - process.burst_time
        current_time += process.burst_time

    return processes

# Function to print the results
def print_process_info(processes):
    print(f"{'PID':<10}{'Arrival Time':<15}{'Burst Time':<15}{'Completion Time':<20}{'Turnaround Time':<20}{'Waiting Time':<15}")
    for process in processes:
        print(f"{process.pid:<10}{process.arrival_time:<15}{process.burst_time:<15}{process.completion_time:<20}{process.turnaround_time:<20}{process.waiting_time:<15}")

# Main function
if __name__ == "__main__":
    # Example list of processes (PID, arrival_time, burst_time)
    processes = [
        Process(1, 0, 4),   # Process 1 with arrival time 0 and burst time 4
        Process(2, 1, 3),   # Process 2 with arrival time 1 and burst time 3
        Process(3, 2, 1),   # Process 3 with arrival time 2 and burst time 1
        Process(4, 3, 2),   # Process 4 with arrival time 3 and burst time 2
        Process(5, 5, 5)    # Process 5 with arrival time 5 and burst time 5
    ]
    
    # Perform FCFS scheduling
    scheduled_processes = fcfs_scheduling(processes)

    # Print process info after scheduling
    print_process_info(scheduled_processes)
